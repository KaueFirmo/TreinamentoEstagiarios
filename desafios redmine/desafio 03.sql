-- PRIMEIRA TABELA (TABELA DE LANÇAMENTO DE NOTAS FISCAIS)
-- 1 - TEM QUE TER REFERENCIA COM A TBLEMP
-- 2 - ELE RECEBE A DATA QUE FOI LANÇADO A NOTA
-- 3 - PODE LANÇAR N NOTAS FISCAIS NO DIA
-- 4 - PRECISA SER PERFORMATICA
-- 5 - NO MINIMO 5 CAMPOS TEM QUE SER CRIADOS (CRIE COM CUIDADO AS PK, CRIE QUANTAS PRECISAR)
-- 6 - O CAMPO DE VALOR PODE RECEBER NOTA DE ENTRADA E NOTA DE SAIDA

CREATE SEQUENCE GEN_ID_LANNFS;

CREATE TABLE TBLLANNFS(
    CODNFS INTEGER NOT NULL,       -- código da nota fiscal AUTOINCRIMENTÁVEL
    CODEMP INTEGER NOT NULL,       -- código da empresa
    NUMNFS VARCHAR(20) NOT NULL,   -- numero da nota fiscal
    DATA_LANCAMENTO DATE NOT NULL,
    VALOR DECIMAL (10,2),
    TIPO_NOTA CHAR(1) CHECK (TIPO_NOTA IN ('E','S')) NOT NULL,  -- E = Entrada | S = Saida
    DESCRICAO VARCHAR (100),

    CONSTRAINT PK_TBLLANNFS PRIMARY KEY(CODNFS),
    CONSTRAINT FK_TBLLANNFS_EMP FOREIGN KEY (CODEMP) REFERENCES TBLEMP(CODEMP)
);

CREATE OR ALTER BI_TBLLANNFS FOR tbllannfs
BEFORE INSERT
AS
BEGIN
    if (NEW.CODNFS IS NULL) then
      NEW.CODNFS = NEXT VALUE FOR GEN_ID_LANNFS;
END

CREATE INDEX IDX_TBLLANNFS_DATA ON TBLLANNFS (DATA_LANCAMENTO);   -- índice pra otimizar busca por data
CREATE INDEX IDX_TBLLANNFS_CODEMP ON TBLLANNFS (CODEMP);          -- índice pra otimizar busca por cód. de empresa

----------------------------------------------------------------------------------------------------------------------------------------------------
-- SEGUNDA TABELA (TABELA DE SALDO MENSAL DAS NOTAS FISCAIS)
-- 1 - REFERENCIA COM A PRIMEIRA TABELA
-- 2 - TABELA VAI AGRUPAR O SALDO MENSAL
-- 3 - ESSA TABELA PRECISA SER ALIMENTADA AUTOMATICAMENTE APOS SER INSERIDO NA PRIMEIRA TABELA
-- 4 - CASO HAJA ATUALIZAÇÃO NA PRIMEIRA TABELA A DE SALDO PRECISA SER ATUALIZADA (QUALQUER TIPO DE ALTERAÇÃO NOS SEUS VALORES)
-- 5 - CRIE NO MINIMO 5 CAMPOS

CREATE TABLE TBLSALMEN(
    ID_SALDO INTEGER NOT NULL,
    CODEMP INTEGER NOT NULL,
    DATA_REF DATE NOT NULL,
    TOTAL_ENTRADA DECIMAL (10,2) DEFAULT 0,
    TOTAL_SAIDA DECIMAL (10,2) DEFAULT 0,

    CONSTRAINT PK_SALDO PRIMARY KEY (ID_SALDO),
    CONSTRAINT FK_SALDO_EMP FOREIGN KEY (CODEMP) REFERENCES TBLEMP(CODEMP),
    CONSTRAINT UQ_SALDO_MES_EMP UNIQUE (CODEMP, DATA_REF) -- manter uma inserção de périodo única
);

-- ========================= TRIGGER DE AUTOINCREMENTO =========================

CREATE GENERATOR GEN_ID_SALDO

CREATE OR ALTER TRIGGER BI_TBLSALMEN FOR TBLSALMEN
BEFORE INSERT
AS
BEGIN
    IF(NEW.ID_SALDO IS NULL) THEN
     NEW.ID_SALDO = NEXT VALUE FOR GEN_ID_SALDO;
END 

-- ========================= TRIGGER DE INSERT =================================

CREATE OR ALTER TRIGGER TRG_INS_TBLLANNFS
AFTER INSERT ON TBLLANNFS
AS
DECLARE VARIABLE V_DATA_REF DATE;
BEGIN
    V_DATA_REF = CAST(EXTRACT(YEAR FROM NEW.DATA_LANCAMENTO) || '-' ||
                    LPAD(EXTRACT(MONTH FROM NEW.DATA_LANCAMENTO), 2, '0') || '-01' AS DATE);
    -- V_DATA_REF É MONTADO UMA STRING BASEADO NO MÊS E ANO E PRIMEIRO DIA DO MÊS, E APÓS ISSO PASSADO PARA TIPO DATE

    IF (EXISTS(SELECT 1 FROM TBLSALMEN
                WHERE CODEMP = NEW.CODEMP AND DATA_REF = :V_DATA_REF)) THEN

    BEGIN
        IF (NEW.TIPO_NOTA = 'E') THEN
            UPDATE TBLSALMEN
            SET TOTAL_ENTRADA = TOTAL_ENTRADA + NEW.VALOR
            WHERE CODEMP = NEW.CODEMP AND DATA_REF = :V_DATA_REF;
        ELSE
            UPDATE TBLSALMEN
            SET TOTAL_SAIDA = TOTAL_SAIDA + NEW.VALOR
            WHERE CODEMP = NEW.VALOR AND DATA_REF = :V_DATA_REF;
    END
    ELSE
    BEGIN
        INSERT INTO TBLSALMEN (CODEMP, DATA_REF, TOTAL_ENTRADA, TOTAL_SAIDA)
        VALUES (
            NEW.CODEMP, :V_DATA_REF,
            CASE WHEN NEW.TIPO_NOTA = 'E' THEN NEW.VALOR ELSE 0 END,
            CASE WHEN NEW.TIPO_NOTA = 'S' THEN NEW.VALOR ELSE 0 END
        );
    END
END

-- ========================= TRIGGER DE UPDATE =================================

CREATE OR ALTER TRIGGER TRI_UPD_TBLLANNFS
AFTER UPDATE ON TBLLANNFS
AS
DECLARE VARIABLE OLD_REF DATE;
DECLARE VARIABLE NEW_REF DATE;
BEGIN
    OLD_REF = CAST(EXTRACT(YEAR FROM OLD.DATA_LANCAMENTO) || '-' ||
                LPAD(EXTRACT(MONTH FROM OLD.DATA_LANCAMENTO), 2, '0') || '-01' AS DATE);

    NEW_REF = CAST(EXTRACT(YEAR FROM NEW.DATA_LANCAMENTO) || '-' ||
                LPAD(EXTRACT(MONTH FROM NEW.DATA_LANCAMENTO), 2, '0') || '-01' AS DATE);

    IF (OLD_REF <> NEW_REF OR OLD.VALOR <> NEW.VALOR OR OLD.TIPO_NOTA <> NEW.TIPO_NOTA) THEN
    BEGIN
        IF (OLD.TIPO_NOTA = 'E') THEN
            UPDATE TBLSALMEN
            SET TOTAL_ENTRADA = TOTAL_ENTRADA - OLD.VALOR
            WHERE CODEMP = OLD.CODEMP AND DATA_REF = :OLD_REF;
        ELSE
            UPDATE TBLSALMEN
            SET TOTAL_SAIDA = TOTAL_SAIDA - OLD.VALOR
            WHERE CODEMP = OLD.CODEMP AND DATA_REF = :OLD_REF;


        IF (EXISTS(SELECT 1 FROM TBLSALMEN
        WHERE CODEMP = NEW.CODEMP AND DATA_REF = :NEW_REF)) THEN
        BEGIN
            IF (NEW.TIPO_NOTA = 'E') THEN
                UPDATE TBLSALMEN
                SET TOTAL_ENTRADA = TOTAL_ENTRADA + NEW.VALOR
                WHERE CODEMP = NEW.CODEMP AND DATA_REF = :NEW_REF;
            ELSE
                UPDATE TBLSALMEN
                SET TOTAL_SAIDA = TOTAL_ENTRADA + NEW.VALOR
                WHERE CODEMP = NEW.CODEMP AND DATA_REF = :NEW_REF;
        END
        ELSE
        BEGIN
          INSERT INTO TBLSALMEN(CODEMP, DATA_REF, TOTAL_ENTRADA, TOTAL_SAIDA)
          VALUES (
            NEW.CODEMP, :NEW_REF,
            CASE WHEN NEW.TIPO_NOTA = 'E' THEN NEW.VALOR ELSE 0 END,
            CASE WHEN NEW.TIPO_NOTA = 'S' THEN NEW.VALOR ELSE 0 END
          );
        END
    END
END