
-- Sequências criadas para ter autoincremento nos triggers.
CREATE SEQUENCE GEN_TABELA_PRODUTO_CODIGO;

CREATE SEQUENCE GEN_TABELA_CLIENTE_CODIGO;

CREATE SEQUENCE GEN_TABELA_VENDAS_NUMERO;

-- Domínios
CREATE DOMAIN DM_BOOLEAN AS CHAR(1)
CHECK (VALUE IN ('S', 'N'));

CREATE DOMAIN DM_CODIGO AS INTEGER
CHECK (VALUE >= 0);

-- Criação das tabelas
CREATE TABLE TABELA_PRODUTO (
    CODIGO DM_CODIGO PRIMARY KEY,
    DESCRICAO VARCHAR(100) NOT NULL,
    PRECO_CUSTO NUMERIC(10,2),
    PRECO_VENDA NUMERIC(10,2),
    ESTOQUE INTEGER,
    CATEGORIA VARCHAR(50),
    DATA_CADASTRO DATE DEFAULT CURRENT_DATE,
    ATIVO DM_BOOLEAN DEFAULT 'S'
);

CREATE TABLE TABELA_CLIENTE( 
    CODIGO DM_CODIGO PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    CPF_CNPJ VARCHAR(14) UNIQUE,
    DATA_NASCIMENTO DATE,
    EMAIL VARCHAR(100),
    DATA_CADASTRO DATE DEFAULT CURRENT_DATE,
    ATIVO DM_BOOLEAN DEFAULT 'S'
);

CREATE TABLE TABELA_VENDAS ( 
    NUMERO DM_CODIGO, 
    DATA_VENDA TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CLIENTE_CODIGO DM_CODIGO,  
    VALOR_TOTAL NUMERIC(10,2),
    PRIMARY KEY (NUMERO, DATA_VENDA), 
    FOREIGN KEY(CLIENTE_CODIGO) REFERENCES TABELA_CLIENTE(CODIGO) 
);

CREATE TABLE TABELA_ITEM_VENDA(
    VENDA_NUMERO DM_CODIGO,
    VENDA_DATA TIMESTAMP,
    PRODUTO_CODIGO DM_CODIGO,
    QUANTIDADE INTEGER,
    PRECO_UNITARIO NUMERIC(10,2),
    PRIMARY KEY (VENDA_NUMERO, VENDA_DATA, PRODUTO_CODIGO),
    FOREIGN KEY (VENDA_NUMERO, VENDA_DATA) REFERENCES TABELA_VENDAS(NUMERO, DATA_VENDA),
    FOREIGN KEY (PRODUTO_CODIGO) REFERENCES TABELA_PRODUTO(CODIGO)
);

-- Criando as sequências para autoincremento nos triggers
CREATE SEQUENCE GEN_TABELA_PRODUTO_CODIGO;
CREATE SEQUENCE GEN_TABELA_CLIENTE_CODIGO;
CREATE SEQUENCE GEN_TABELA_VENDAS_NUMERO;


SET TERM ^^ ;
-- Trigger para a tabela de produtos
CREATE TRIGGER TRG_BI_TABELA_PRODUTO FOR TABELA_PRODUTO
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN
    IF (NEW.CODIGO IS NULL) THEN 
        NEW.CODIGO = NEXT VALUE FOR GEN_TABELA_PRODUTO_CODIGO;
END ^^ 

-- Trigger para a tabela de clientes
CREATE TRIGGER TRG_BI_TABELA_CLIENTE FOR TABELA_CLIENTE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN
    IF (NEW.CODIGO IS NULL) THEN 
        NEW.CODIGO = NEXT VALUE FOR GEN_TABELA_CLIENTE_CODIGO;
END ^^

-- Trigger para a tabela de vendas
CREATE TRIGGER TRG_BI_TABELA_VENDAS FOR TABELA_VENDAS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.NUMERO IS NULL) THEN 
        NEW.NUMERO = NEXT VALUE FOR GEN_TABELA_VENDAS_NUMERO;
END ^^

SET TERM ; ^^ 

-- PROCEDURES

SET TERM ^^ ;

CREATE PROCEDURE ADD_PRODUTO (
    DESCRICAO VARCHAR(100),
    PRECO_CUSTO NUMERIC(10,2),
    PRECO_VENDA NUMERIC(10,2),
    CATEGORIA VARCHAR(50)
)
AS
BEGIN
  -- Verifica se o preço de venda é inválido
  IF (PRECO_VENDA <= PRECO_CUSTO) THEN
  BEGIN
    EXCEPTION EX_PRECO_INVALIDO;
  END

  -- Insere o produto e retorna o CODIGO gerado (opcional)
  INSERT INTO TABELA_PRODUTO 
    (DESCRICAO, PRECO_CUSTO, PRECO_VENDA, CATEGORIA, ESTOQUE)
  VALUES (:DESCRICAO, :PRECO_CUSTO, :PRECO_VENDA, :CATEGORIA, 0);

END ^^

CREATE PROCEDURE ATUALIZAR_ESTOQUE (
    PRODUTO_CODIGO DM_CODIGO,
    QUANTIDADE INTEGER)
AS
DECLARE VARIABLE ESTOQUE_ATUAL INTEGER;
BEGIN
  -- Verifica se a quantidade informada é válida
  IF (QUANTIDADE <= 0) THEN
  BEGIN
    EXCEPTION EX_QUANTIDADE_INVALIDA;
  END

  -- Obtém o estoque atual do produto
  SELECT ESTOQUE 
  FROM TABELA_PRODUTO 
  WHERE CODIGO = :PRODUTO_CODIGO
  INTO :ESTOQUE_ATUAL;

  -- Verifica se o produto existe
  IF (ESTOQUE_ATUAL IS NULL) THEN
  BEGIN
    EXCEPTION EX_PRODUTO_NAO_ENCONTRADO;
  END

  -- Verifica se há estoque suficiente
  IF (ESTOQUE_ATUAL < QUANTIDADE) THEN
  BEGIN
    EXCEPTION EX_ESTOQUE_INSUFICIENTE;
  END

  -- Atualiza o estoque
  UPDATE TABELA_PRODUTO
  SET ESTOQUE = ESTOQUE - :QUANTIDADE
  WHERE CODIGO = :PRODUTO_CODIGO;

END ^^

CREATE PROCEDURE CALCULAR_TOTAL_VENDAS_CLIENTE (
    CLIENTE_CODIGO DM_CODIGO)
RETURNS (TOTAL NUMERIC(10,2))
AS
BEGIN
  -- Inicializa o total como 0 para evitar valores nulos
  TOTAL = 0;

  -- Calcula o total das vendas do cliente
  SELECT COALESCE(SUM(VALOR_TOTAL), 0) 
  FROM TABELA_VENDAS
  WHERE CLIENTE_CODIGO = :CLIENTE_CODIGO
  INTO :TOTAL;

  -- Retorna o resultado
  SUSPEND;
END ^^

SET TERM ; ^^

